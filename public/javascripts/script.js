// Generated by CoffeeScript 1.4.0
var Uploader, handle_drag_enter, handle_drag_leave, handle_drag_over, handle_drop, root, _hide_overlay, _show_overlay,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

root = typeof exports !== "undefined" && exports !== null ? exports : this;

Uploader = (function() {

  function Uploader(file, progress_bar, message) {
    this.file = file;
    this.progress_bar = progress_bar;
    this.message = message;
    this.upload_complete = __bind(this.upload_complete, this);

    this.update_progress = __bind(this.update_progress, this);

    this.is_valid = __bind(this.is_valid, this);

    this.display_success = __bind(this.display_success, this);

    this.display_error = __bind(this.display_error, this);

    this.display_info = __bind(this.display_info, this);

    this._set_message = __bind(this._set_message, this);

    this._reset_message_classes = __bind(this._reset_message_classes, this);

    this.before_send = __bind(this.before_send, this);

    this._bar = this.progress_bar.find('.bar');
  }

  Uploader.prototype.error_handler = function(evt) {
    switch (evt.target.error.code) {
      case evt.target.error.NOT_FOUND_ERR:
        return this.display_error('File Not Found.');
      case evt.target.error.NOT_READABLE_ERR:
        return this.display_error('File is not readable.');
      case evt.target.error.ABORT_ERR:
        return null;
      default:
        return this.display_error('An error occurred reading this file.');
    }
  };

  Uploader.prototype.before_send = function() {
    this.progress_bar.addClass('active');
    return this.display_info('Uploading..');
  };

  Uploader.prototype._update_progress_bar = function(percent) {
    return this._bar.width("" + percent + "%");
  };

  Uploader.prototype._reset_message_classes = function() {
    return this.message.removeClass('text-info text-error text-class');
  };

  Uploader.prototype._set_message = function(type, message) {
    this._reset_message_classes();
    this.message.addClass("text-" + type);
    return this.message.html(message);
  };

  Uploader.prototype.display_info = function(message) {
    return this._set_message('info', message);
  };

  Uploader.prototype.display_error = function(message) {
    return this._set_message('error', message);
  };

  Uploader.prototype.display_success = function(message) {
    return this._set_message('success', message);
  };

  Uploader.prototype.is_valid = function(file) {
    var ALLOWED_TYPES, MAX_UPLOAD_SIZE;
    MAX_UPLOAD_SIZE = 5 * 1024 * 1024;
    ALLOWED_TYPES = 'text/.*|image/.*';
    if (file.type.match(ALLOWED_TYPES) && file.size <= MAX_UPLOAD_SIZE) {
      return true;
    } else {
      return false;
    }
  };

  Uploader.prototype.update_progress = function(evt) {
    var percent_loaded;
    if (evt.lengthComputable) {
      percent_loaded = Math.round((evt.loaded / evt.total) * 100);
      if (percent_loaded < 100) {
        this._update_progress_bar(percent_loaded);
      }
      if (percent_loaded > 99.99) {
        this.display_info('generating url..');
        return this._update_progress_bar(percent_loaded);
      }
    }
  };

  Uploader.prototype.upload_complete = function(data) {
    this._update_progress_bar(100);
    this.progress_bar.removeClass('active');
    if (data.error) {
      this.progress_bar.addClass('progress-danger');
      return this.display_error(data.message);
    } else {
      this.progress_bar.addClass('progress-success');
      return this.display_success("<a href=\"" + data.url + "\" target=\"_blank\">" + data.url + "</a>");
    }
  };

  Uploader.prototype.upload = function() {
    var ajax_params, form_data;
    if (!this.is_valid(this.file)) {
      this.display_error('Only text and image files less than 5MB supported.');
      return;
    }
    form_data = new FormData();
    form_data.append('file', this.file);
    this.before_send();
    ajax_params = {
      type: 'POST',
      url: '/upload',
      data: form_data,
      contentType: false,
      processData: false,
      progress: this.update_progress,
      success: this.upload_complete
    };
    $.ajax(ajax_params);
    return null;
  };

  return Uploader;

})();

_show_overlay = function() {
  drop_zone.show();
  return drop_zone.addClass('drag-active');
};

_hide_overlay = function() {
  drop_zone.hide();
  return drop_zone.removeClass('drag-active');
};

handle_drag_over = function(evt) {
  evt.stopPropagation();
  evt.preventDefault();
  return evt.originalEvent.dataTransfer.dropEffect = 'copy';
};

handle_drop = function(evt) {
  var file, file_el, file_html, files, message, progress_bar, _i, _len, _results;
  evt.stopPropagation();
  evt.preventDefault();
  _hide_overlay();
  files = evt.originalEvent.dataTransfer.files;
  _results = [];
  for (_i = 0, _len = files.length; _i < _len; _i++) {
    file = files[_i];
    file.id = new Date().getTime();
    file_html = "        <div id=\"file-" + file.name + "-" + file.id + "\" class=\"file media\">            <div class=\"media-body\">                <h4 class=\"media-heading\">" + file.name + "</h4>                <div class=\"message pull-left\"></div>                <br>                <div class=\"progress-bar progress progress-striped\">                    <div class=\"bar\"></div>                </div>            </div>        </div><hr>";
    $('#output').append(file_html);
    file_el = document.getElementById("file-" + file.name + "-" + file.id);
    progress_bar = $(file_el).find('.progress-bar');
    message = $(file_el).find('.message');
    root.uploader = new Uploader(file, progress_bar, message);
    _results.push(uploader.upload());
  }
  return _results;
};

handle_drag_enter = function(evt) {
  evt.stopPropagation();
  evt.preventDefault();
  return _show_overlay();
};

handle_drag_leave = function(evt) {
  evt.stopPropagation();
  evt.preventDefault();
  if (evt.srcElement === drop_mask.get(0)) {
    console.log(evt);
    return _hide_overlay();
  }
};

window.onready = function() {
  if (!(window.File && window.FileReader && window.FileList && window.Blob && window.FormData)) {
    alert('APIs are not supported');
    null;
  }
  root.drop_zone = $("#drop-zone");
  root.drop_mask = $("#drop-zone #drop-mask");
  $(document).bind('dragenter', handle_drag_enter);
  $(document).bind('dragleave', handle_drag_leave);
  $(document).bind('dragover', handle_drag_over);
  return drop_zone.bind('drop', handle_drop);
};
