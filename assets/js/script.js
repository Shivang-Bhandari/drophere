// Generated by CoffeeScript 1.4.0
var BaseHandler, handle_drag_enter, handle_drag_leave, handle_drag_over, handle_drop, root;

root = typeof exports !== "undefined" && exports !== null ? exports : this;

BaseHandler = (function() {

  function BaseHandler(file, progress_bar, error_element) {
    this.file = file;
    this.progress_bar = progress_bar;
    this.error_element = error_element;
  }

  BaseHandler.prototype.read = function() {
    var reader,
      _this = this;
    reader = new FileReader;
    reader.onerror = this.error_handler;
    reader.onprogress = this.update_progress;
    reader.onabort = function(evt) {
      return alert('File reading aborted !');
    };
    reader.onloadstart = function(evt) {
      console.log('Loading');
      return _this.progress_bar.html('Loading');
    };
    reader.onload = function(evt) {
      console.log('Loaded');
      return _this.progress_bar.html('Loaded');
    };
    return reader.readAsText(this.file);
  };

  BaseHandler.prototype.error_handler = function(evt) {
    switch (evt.target.error.code) {
      case evt.target.error.NOT_FOUND_ERR:
        return alert('File Not Found.');
      case evt.target.error.NOT_READABLE_ERR:
        return alert('File is not readable.');
      case evt.target.error.ABORT_ERR:
        return null;
      default:
        return alert('An error occurred reading this file.');
    }
  };

  BaseHandler.prototype.update_progress = function(evt) {
    var percent_loaded;
    if (evt.lengthComputable) {
      percent_loaded = Math.round((evt.loaded / evt.total) * 100);
      if (percent_loaded < 100) {
        console.log('#{percent_loaded}%');
        return this.progress_bar.html("" + percent_loaded + "%");
      }
    }
  };

  BaseHandler.prototype.upload = function() {};

  return BaseHandler;

})();

handle_drag_over = function(evt) {
  evt.stopPropagation();
  evt.preventDefault();
  return evt.originalEvent.dataTransfer.dropEffect = 'copy';
};

handle_drop = function(evt) {
  var error_element, file, files, handler, progress_bar, _error_element, _i, _len, _progress_bar, _results;
  evt.stopPropagation();
  evt.preventDefault();
  drop_zone.removeClass('drag-active');
  files = evt.originalEvent.dataTransfer.files;
  console.log(files);
  _results = [];
  for (_i = 0, _len = files.length; _i < _len; _i++) {
    file = files[_i];
    _progress_bar = document.createElement('div');
    _error_element = document.createElement('div');
    progress_bar = $(_progress_bar);
    error_element = $(_error_element);
    $('#output').append(progress_bar);
    $('#output').append(error_element);
    handler = new BaseHandler(file, progress_bar, error_element);
    _results.push(handler.read());
  }
  return _results;
};

handle_drag_enter = function(evt) {
  evt.stopPropagation();
  evt.preventDefault();
  return drop_zone.addClass('drag-active');
};

handle_drag_leave = function(evt) {
  evt.stopPropagation();
  evt.preventDefault();
  return drop_zone.removeClass('drag-active');
};

window.onready = function() {
  if (!(window.File && window.FileReader && window.FileList && window.Blob)) {
    alert('APIs are not supported');
    null;
  }
  root.drop_zone = $("#drop-zone");
  drop_zone.bind('dragenter', handle_drag_enter);
  drop_zone.bind('dragleave', handle_drag_leave);
  drop_zone.bind('dragover', handle_drag_over);
  return drop_zone.bind('drop', handle_drop);
};
