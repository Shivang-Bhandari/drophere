// Generated by CoffeeScript 1.4.0
var Browser, app, chai, expect, fs, sinon, sys;

app = require('../app.js');

Browser = require('zombie');

chai = require('chai');

sinon = require('sinon');

expect = chai.expect;

fs = require('fs');

sys = require('sys');

before(function() {
  app.set('env', 'testing');
  return app.listen(3000);
});

describe("Front-end", function() {
  var $, after, ajax, browser, mock_drop_evt, overlay_cls, stub_ajax;
  browser = null;
  overlay_cls = ".drag-active";
  ajax = null;
  $ = null;
  mock_drop_evt = {
    originalEvent: {
      dataTransfer: {
        files: [
          {
            name: 'sample_file',
            type: 'text/plain',
            size: 100
          }
        ]
      }
    },
    stopPropagation: function() {
      return null;
    },
    preventDefault: function() {
      return null;
    }
  };
  stub_ajax = function(browser) {
    var stub;
    return stub = sinon.stub(browser.window.jQuery, 'ajax');
  };
  beforeEach(function(done) {
    browser = new Browser({
      site: 'http://localhost:3000'
    });
    return browser.visit("/").then(function() {
      ajax = stub_ajax(browser);
      browser.window._evaluate(fs.readFileSync(fs.realpathSync('.') + '/test/form_data.js', 'utf8'));
      $ = browser.window.jQuery;
      return done();
    }).fail(function(error) {
      return done(error);
    });
  });
  afterEach(function(done) {
    browser.close();
    ajax.restore();
    return done();
  });
  after = function() {
    browser.close();
    return app.close();
  };
  it("should check if browser is defined", function() {
    return expect(browser).to.be.ok;
  });
  it("should check if overlay is displayed on drag over", function(done) {
    var _this = this;
    return browser.fire("body", 'dragenter').then(function() {
      var overlay;
      overlay = browser.query(overlay_cls);
      expect(overlay).to.exist;
      return done();
    }).fail(function(error) {
      return done(error);
    });
  });
  it("should check if overlay is hidden on drag leave", function(done) {
    var _this = this;
    return browser.fire("#drop-mask", 'dragleave').then(function() {
      var overlay;
      overlay = browser.query(overlay_cls);
      expect(overlay).to.not.exist;
      return done();
    }).fail(function(error) {
      return done(error);
    });
  });
  it("should check if dropping file adds the DOM element", function() {
    var file_el, message, progressbar;
    ajax.yieldsTo("success", {
      error: false,
      message: 'message',
      url: 'http://some.url',
      filename: 'some-file'
    });
    browser.window.handle_drop(mock_drop_evt);
    file_el = $(".file");
    progressbar = $(".file .progress-bar");
    message = $(".file .message");
    expect(file_el).to.have.length.above(0);
    expect(progressbar).to.have.length.above(0);
    return expect(message).to.have.length.above(0);
  });
  it("should check if URL is shown on successful upload", function() {
    ajax.yieldsTo("success", {
      error: false,
      message: 'some message',
      url: 'http://file.url/file',
      filename: 'file'
    });
    browser.window.handle_drop(mock_drop_evt);
    expect($('.active')).to.have.length(0);
    expect($('.progress-success')).to.have.length.above(0);
    expect($('.text-success')).to.have.length.above(0);
    return expect($('.text-success > a').get(0).href).to.equal('http://file.url/file');
  });
  it("should check message when upload is in progress", function() {
    ajax.yieldsTo("progress", {
      lengthComputable: true,
      loaded: 50,
      total: 100
    });
    browser.window.handle_drop(mock_drop_evt);
    expect($('.active')).to.have.length.above(0);
    return expect($('.text-info')).to.have.length.above(0);
  });
  it("should check if error message is shown on unsuccessful upload", function() {
    ajax.yieldsTo("success", {
      error: true,
      message: 'error',
      url: '',
      filename: 'file'
    });
    browser.window.handle_drop(mock_drop_evt);
    expect($('.active')).to.have.length(0);
    expect($('.progress-danger')).to.have.length.above(0);
    expect($('.text-error')).to.have.length.above(0);
    return expect($('.text-error').html()).to.equal('error');
  });
  it("should not upload file of invalid type");
  return it("should not upload file greater than maximum allowed size");
});
