// Generated by CoffeeScript 1.4.0
var Browser, app, chai, expect, globals, sinon;

app = require('../app.js');

Browser = require('zombie');

chai = require('chai');

sinon = require('sinon');

expect = chai.expect;

globals = {};

app.set('env', 'testing');

app.listen(3000);

describe("Drag overlay", function() {
  var after, browser, mock_evt, overlay_cls;
  browser = new Browser({
    site: 'http://localhost:3000'
  });
  overlay_cls = ".drag-active";
  mock_evt = {
    originalEvent: {
      dataTransfer: {
        files: [
          {
            name: 'sample_file',
            type: 'text/plain',
            size: 100
          }
        ]
      }
    },
    stopPropagation: function() {
      return null;
    },
    preventDefault: function() {
      return null;
    }
  };
  after = function() {
    browser.close();
    return app.close();
  };
  it("check if browser is defined", function() {
    return expect(browser).to.be.ok;
  });
  it("check if overlay is displayed on drag over", function(done) {
    var _this = this;
    browser.visit("/").then(function() {
      return browser.fire("body", 'dragenter').then(function() {
        var overlay;
        overlay = browser.query(overlay_cls);
        expect(overlay).to.exist;
        return done();
      }).fail(function(error) {
        return done(error);
      });
    }).fail(function(error) {
      return done(error);
    });
    return null;
  });
  it("check if overlay is hidden on drag leave", function(done) {
    var _this = this;
    browser.visit("/").then(function() {
      return browser.fire("#drop-mask", 'dragleave').then(function() {
        var overlay;
        overlay = browser.query(overlay_cls);
        expect(overlay).to.not.exist;
        return done();
      }).fail(function(error) {
        return done(error);
      });
    }).fail(function(error) {
      return done(error);
    });
    return null;
  });
  return it("check if dropping file adds the DOM element", function(done) {
    var _this = this;
    browser.visit("/").then(function() {
      var file_el, message, progressbar;
      browser.window.handle_drop(mock_evt);
      file_el = browser.query(".file ");
      progressbar = browser.query(".file > .progress-bar");
      message = browser.query(".file > .message");
      expect(file_el).to.exist;
      expect(progressbar).to.exist;
      expect(message).to.exist;
      return done();
    }).fail(function(error) {
      return done(error);
    });
    return null;
  });
});
